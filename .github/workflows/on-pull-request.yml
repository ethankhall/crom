on: [pull_request]

name: Continuous integration

jobs:
  create-release:
    needs:
      - check
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('ci/cache-version') }}-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
      - name: create pre-release
        id: version
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          VERSION=$(cargo run -- get pre-release)
          gh release create $VERSION --generate-notes --prerelease --target $(git rev-parse HEAD)
          echo "::set-output name=version::$VERSION"

  publish:
    uses: ./.github/workflows/create-artifacts.yml
    needs: create-release
    with:
      version: ${{ needs.create-release.outputs.version }}

  docker-publish:
    uses: ./.github/workflows/docker-build.yml
    needs: create-release
    with:
      version: ${{ needs.create-release.outputs.version }}

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('ci/cache-version') }}-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
      - name: cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
      ## Cargo test
      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
      ## Cargo fmt
      - run: rustup component add rustfmt
      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      ## Cargo clippy
      - run: rustup component add clippy
      - name: cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings